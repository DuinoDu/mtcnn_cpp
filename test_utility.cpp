#include "catch.hpp"

#include "utility.hpp"
#include <fstream>

void loadFromFile(string filename, MatrixXd& X)
{
	ifstream fin(filename);
	if (fin.is_open()){
		for (int row = 0; row < X.rows(); row++)
			for (int col = 0; col < X.cols(); col++){
				double item = 0.0;
				fin >> item;
				X(row, col) = item;
			}
		fin.close();
	}
}


TEST_CASE("utility"){
	// Define var

	REQUIRE(false);

	SECTION("bbreg, given boundingbox and reg, return revised boundingbox")
	{
		MatrixXd total_boxes;
		total_boxes.resize(2, 5);
		total_boxes << 205, 73, 400, 268, 0.98384535,
			209, 101, 367, 259, 0.97880608;
		MatrixXd mv;
		mv.resize(4, 2);
		mv << -0.04941138, -0.07724266,
			0.0447434, -0.08641055,
			-0.28392452, -0.1872426,
			0.03337108, 0.05036401;
		Matrix<double, 2, 5> boxes_p;
		boxes_p << 195.31536902, 81.76970568, 344.35079408, 274.54073162, 0.98384535,
			196.71841745, 87.26072219, 337.2284270, 267.00787819, 0.97880608; 

		bbreg(total_boxes, mv); // how to use reference here?
		for (int i = 0; i < total_boxes.size(); i++){
			REQUIRE((int)total_boxes(i) == (int)boxes_p(i));
		}
	}

	SECTION("pad, unknown, some error in python version")
	{
		MatrixXd total_boxes;
		total_boxes.resize(3, 5);
		total_boxes <<208, 100, 397, 289, 0.99878901,
			198, 76, 374, 252, 0.99813914,
			201, 62, 418, 280, 0.99703938;
		double w = 450;
		double h = 431;
		
		Matrix<double, 3, 1> dy, edy, dx, edx, y, ey, x, ex, tmpw, tmph;
		dy << 0, 0, 0;
		edy << 189., 176., 218.;
		dx << 0, 0, 0;
		edx << 189., 176., 217.;
		y << 99., 75., 61.;
		ey << 288., 251., 279.;
		x << 207., 197., 200.;
		ex << 396., 373., 417.;
		tmpw << 190., 177., 218.;
		tmph << 190., 177., 219.;

		MatrixXd result;
		pad(total_boxes, w, h, result);
		for (int i = 0; i < result.rows(); i++){
			REQUIRE((int)result(i, 0) == (int)dy(i,0));
			REQUIRE((int)result(i, 1) == (int)edy(i,0));
			REQUIRE((int)result(i, 2) == (int)dx(i,0));
			REQUIRE((int)result(i, 3) == (int)edx(i,0));
			REQUIRE((int)result(i, 4) == (int)y(i,0));
			REQUIRE((int)result(i, 5) == (int)ey(i,0));
			REQUIRE((int)result(i, 6) == (int)x(i,0));
			REQUIRE((int)result(i, 7) == (int)ex(i,0));
			REQUIRE((int)result(i, 8) == (int)tmpw(i,0));
			REQUIRE((int)result(i, 9) == (int)tmph(i,0));
		}
	}

	SECTION("rerec, convert boundingbox to square")
	{
		MatrixXd total_boxes;
		total_boxes.resize(5, 5);
		total_boxes << 
			230.07784033, 100.35094793, 375.76201081, 289.35045105, 0.99878901,
			217.63145834, 76.52293204, 355.90327752, 252.88063219, 0.99813914,
			219.13960473, 62.8926762, 400.67869663, 280.61021234, 0.99703938,
			246.17034657, 275.92842653, 311.22883457, 362.11322095, 0.99665654,
			238.78208129, 189.81249212, 304.58434872, 268.79625906, 0.9940117;
		Matrix<double, 5, 5> out;
		out << 
			208.42017401, 100.35094793, 397.41967713, 289.35045105, 0.99878901,
			198.58851785, 76.52293204, 374.94621801, 252.88063219, 0.99813914,
			201.05038261, 62.8926762, 418.76791875, 280.61021234, 0.99703938,
			235.60719337, 275.92842653, 321.79198778, 362.11322095, 0.99665654,
			232.19133154, 189.81249212, 311.17509848, 268.79625906, 0.9940117;
		rerec(total_boxes);
		for (int i = 0; i < total_boxes.size(); i++){
			REQUIRE((int)total_boxes(i) == (int)out(i));
		}
	}

	SECTION("nms1")
	{
		MatrixXd total_boxes;
		total_boxes.resize(6, 5);
		total_boxes <<
			183.41366396, 71.08030653, 346.26206368, 272.96784276, 0.99967718,
			188.47475302, 72.30254986, 340.0438953, 271.67589057, 0.99965048,
			191.2930266, 76.61472487, 339.47823516, 270.15330981, 0.99926764,
			193.21896309, 75.26130742, 339.58434188, 266.14937097, 0.98572284,
			187.90412591, 79.68451911, 332.99922186, 267.89193738, 0.99808455,
			189.21408205, 75.46541651, 344.2887798, 273.11075579, 0.99969637;
		Matrix<double, 1, 1> out_p;
		out_p << 5;
		vector<int> out;
		nms(total_boxes, 0.7, "Min", out);
		for (int i = 0; i < out.size(); i++){
			REQUIRE(out[i] == out_p(i));
		}
	}
	SECTION("nms2")
	{
		MatrixXd total_boxes;
		total_boxes.resize(11, 5);
		total_boxes <<
			208., 100., 397., 289., 0.74231839,
			198., 76., 374., 252., 0.96700346,
			201., 62., 418., 280., 0.79915774,
			194., 129., 300., 235., 0.86142009,
			209., 101., 367., 259., 0.97880608,
			205., 73., 400., 268., 0.98384535,
			211., 91., 336., 216., 0.84980434,
			190., 96., 337., 242., 0.97570157,
			198., 64., 348., 214., 0.95710379,
			184., 102., 314., 232., 0.97205275,
			214., 89., 383., 258., 0.96966559;
		Matrix<double, 6, 1> out_p;
		out_p << 5, 4, 7, 8, 3, 6;
		vector<int> out;
		nms(total_boxes, 0.7, "Min", out);
		for (int i = 0; i < out.size(); i++){
			REQUIRE(out[i] == out_p(i));
		}
	}
	SECTION("nms3")
	{
		MatrixXd total_boxes;
		total_boxes.resize(78, 9);
		total_boxes <<
			2.78000000e+02, 1.35000000e+02, 2.96000000e+02, 1.53000000e+02, 9.33610499e-01, -8.20154548e-02, -7.18935579e-02, -1.65382951e-01, 7.94545859e-02,
			1.91000000e+02, 9.50000000e+01, 2.10000000e+02, 1.13000000e+02, 8.95024121e-01, -4.34634648e-02, -1.00855976e-01, 1.89852491e-02, 1.04824454e-01,
			2.55000000e+02, 3.51000000e+02, 2.73000000e+02, 3.70000000e+02, 8.45106840e-01, -1.70209587e-01, -2.77867734e-01, 1.69330090e-03, 1.05846629e-01,
			3.58000000e+02, 1.65000000e+02, 3.76000000e+02, 1.83000000e+02, 8.26624632e-01, -4.99067083e-03, -9.66295451e-02, -5.33807203e-02, 5.83959408e-02,
			2.51000000e+02, 1.45000000e+02, 2.70000000e+02, 1.63000000e+02, 8.05955648e-01, 2.93287188e-02, -9.10318196e-02, 2.51093954e-02, 4.70300205e-02,
			3.55000000e+02, 1.41000000e+02, 3.73000000e+02, 1.60000000e+02, 7.61156619e-01, -2.68058106e-02, -2.53878474e-01, 1.79893449e-02, 6.75155967e-02,
			2.45000000e+02, 3.48000000e+02, 2.63000000e+02, 3.66000000e+02, 7.35058546e-01, 1.44458458e-01, -7.45378435e-02, 8.76102671e-02, 1.24141961e-01,
			2.48000000e+02, 1.21000000e+02, 2.66000000e+02, 1.40000000e+02, 7.32023358e-01, -3.90662961e-02, -1.01619840e-01, 7.33766630e-02, 2.26068705e-01,
			2.78000000e+02, 1.28000000e+02, 2.96000000e+02, 1.46000000e+02, 7.05132067e-01, -6.41673654e-02, -1.74753983e-02, -5.79212978e-02, 2.05339223e-01,
			3.61000000e+02, 1.71000000e+02, 3.80000000e+02, 1.90000000e+02, 7.01460600e-01, -6.14192970e-02, -1.54274970e-01, -5.68182208e-02, 8.09654742e-02,
			2.31000000e+02, 1.41000000e+02, 2.50000000e+02, 1.60000000e+02, 6.94773257e-01, 1.77539885e-04, -1.94122978e-02, -6.75368309e-02, 1.98527187e-01,
			2.71000000e+02, 2.41000000e+02, 2.90000000e+02, 2.60000000e+02, 6.81389451e-01, -1.08519286e-01, -2.50961393e-01, -1.13021620e-02, 6.95331991e-02,
			1.85000000e+02, 9.50000000e+01, 2.03000000e+02, 1.13000000e+02, 6.73368990e-01, 8.41817409e-02, -4.88474630e-02, 7.50392452e-02, 9.43255126e-02,
			1.21000000e+02, 2.55000000e+02, 1.40000000e+02, 2.73000000e+02, 6.64589882e-01, 4.22678664e-02, -5.97293675e-02, -8.68501887e-03, 9.56013501e-02,
			2.01000000e+02, 9.50000000e+01, 2.20000000e+02, 1.13000000e+02, 6.64079845e-01, -8.17664862e-02, -1.40165046e-01, 2.29184106e-02, 1.43394351e-01,
			3.58000000e+02, 1.15000000e+02, 3.76000000e+02, 1.33000000e+02, 6.59236729e-01, -9.69149470e-02, -5.10172546e-02, -1.37301594e-01, 1.89575389e-01,
			3.55000000e+02, 1.35000000e+02, 3.73000000e+02, 1.53000000e+02, 6.58442855e-01, -2.76965909e-02, -1.41338900e-01, -5.52261770e-02, 7.09443688e-02,
			2.45000000e+02, 2.21000000e+02, 2.63000000e+02, 2.40000000e+02, 6.27590418e-01, 4.56827283e-02, -3.08516026e-02, -7.18832389e-03, 5.20548560e-02,
			2.35000000e+02, 2.61000000e+02, 2.53000000e+02, 2.80000000e+02, 6.21665239e-01, -1.35340951e-02, -2.80141413e-01, 8.19843933e-02, 4.62583527e-02,
			3.55000000e+02, 1.48000000e+02, 3.73000000e+02, 1.66000000e+02, 6.08780503e-01, 4.01630700e-02, -1.81000233e-01, -4.39032912e-04, 3.88609432e-02,
			2.15000000e+02, 1.48000000e+02, 2.33000000e+02, 1.66000000e+02, 6.04665518e-01, -5.78003339e-02, -7.93638229e-02, -3.00562195e-02, 1.45663098e-01,
			1.81000000e+02, 9.10000000e+01, 2.06000000e+02, 1.17000000e+02, 9.52542901e-01, 9.74441022e-02, -5.45117110e-02, 1.98100284e-02, 4.81336862e-02,
			2.46000000e+02, 3.45000000e+02, 2.72000000e+02, 3.71000000e+02, 9.33929205e-01, 1.06157333e-01, -8.55512321e-02, 4.38237116e-02, 1.14697382e-01,
			1.90000000e+02, 9.10000000e+01, 2.16000000e+02, 1.17000000e+02, 9.32594240e-01, 2.86794454e-03, -2.00528428e-02, -3.24708670e-02, 1.03921875e-01,
			2.51000000e+02, 2.84000000e+02, 2.77000000e+02, 3.10000000e+02, 8.57817709e-01, -8.71825218e-03, -1.27555713e-01, 3.65214795e-03, 1.64893642e-01,
			2.70000000e+02, 2.37000000e+02, 2.96000000e+02, 2.63000000e+02, 8.34514976e-01, -1.44744337e-01, -2.50891954e-01, -4.42436226e-02, 7.35061914e-02,
			2.56000000e+02, 1.29000000e+02, 2.82000000e+02, 1.55000000e+02, 7.75500715e-01, 4.47253697e-02, -1.65223591e-02, 4.26719412e-02, 1.83312178e-01,
			2.09000000e+02, 1.66000000e+02, 2.35000000e+02, 1.92000000e+02, 7.40907490e-01, -1.47132501e-01, -2.25915119e-01, -2.60201506e-02, 8.36350173e-02,
			2.51000000e+02, 3.50000000e+02, 2.77000000e+02, 3.76000000e+02, 7.34265745e-01, -6.06262423e-02, -2.17379048e-01, 4.64009494e-03, 4.83529605e-02,
			2.37000000e+02, 2.13000000e+02, 2.63000000e+02, 2.39000000e+02, 7.26572812e-01, 2.46584415e-02, -8.26789290e-02, 4.91453633e-02, 1.34076715e-01,
			1.99000000e+02, 1.48000000e+02, 2.25000000e+02, 1.73000000e+02, 6.43414974e-01, 3.68531682e-02, -6.73728436e-03, 1.04441419e-02, 1.96677729e-01,
			2.65000000e+02, 1.33000000e+02, 2.91000000e+02, 1.59000000e+02, 6.26788497e-01, -3.78842913e-02, -1.34447947e-01, 2.60662213e-02, 1.03012025e-01,
			2.75000000e+02, 2.04000000e+02, 3.00000000e+02, 2.30000000e+02, 6.23979330e-01, -1.04509294e-04, -8.11065137e-02, 7.23331422e-03, 1.36356235e-01,
			3.50000000e+02, 1.15000000e+02, 3.76000000e+02, 1.41000000e+02, 6.15869761e-01, 1.08815610e-01, -2.54970286e-02, -3.95275280e-02, 8.02992731e-02,
			1.75000000e+02, 8.90000000e+01, 2.12000000e+02, 1.25000000e+02, 9.74581957e-01, 1.89248875e-01, -2.72051916e-02, 2.34529600e-02, -1.56523660e-02,
			2.48000000e+02, 2.75000000e+02, 2.85000000e+02, 3.11000000e+02, 9.39174831e-01, -2.37493031e-02, -5.91576472e-02, -9.73371863e-02, 1.38470754e-01,
			1.88000000e+02, 9.60000000e+01, 2.25000000e+02, 1.32000000e+02, 9.29924726e-01, 1.84886530e-02, -1.62535965e-01, 2.02556252e-02, 2.92208903e-02,
			2.02000000e+02, 1.75000000e+02, 2.38000000e+02, 2.12000000e+02, 9.24718320e-01, 3.96779366e-02, -1.60735354e-01, -4.13426794e-02, -1.95367038e-02,
			2.48000000e+02, 3.41000000e+02, 2.85000000e+02, 3.77000000e+02, 9.21568811e-01, 2.43514776e-03, -1.01761237e-01, -6.84146658e-02, 7.60710537e-02,
			2.02000000e+02, 1.49000000e+02, 2.38000000e+02, 1.85000000e+02, 8.60738099e-01, 3.89678665e-02, -4.38078493e-03, -6.84391111e-02, 8.06697309e-02,
			2.55000000e+02, 2.35000000e+02, 2.91000000e+02, 2.71000000e+02, 8.17871451e-01, -1.06936187e-01, -2.60329783e-01, 2.69831046e-02, 6.73739463e-02,
			3.41000000e+02, 1.09000000e+02, 3.77000000e+02, 1.45000000e+02, 7.63661981e-01, 7.04247952e-02, -1.76096726e-02, -1.12217262e-01, 4.46442552e-02,
			2.48000000e+02, 1.16000000e+02, 2.85000000e+02, 1.52000000e+02, 7.17816770e-01, 6.95258938e-03, -4.99074087e-02, -3.11612934e-02, 1.07024208e-01,
			2.02000000e+02, 1.62000000e+02, 2.38000000e+02, 1.98000000e+02, 6.44978523e-01, 6.01485334e-02, -1.05217904e-01, -4.13702726e-02, -4.18038480e-02,
			2.02000000e+02, 1.88000000e+02, 2.38000000e+02, 2.25000000e+02, 6.20088577e-01, 6.89951889e-03, -4.17398006e-01, 6.53185323e-02, -1.19325414e-01,
			3.48000000e+02, 1.16000000e+02, 3.84000000e+02, 1.52000000e+02, 6.00018024e-01, 2.80705690e-02, -1.89156726e-01, -2.43346393e-01, -1.41168237e-01,
			3.32000000e+02, 1.07000000e+02, 3.83000000e+02, 1.58000000e+02, 9.57915843e-01, 4.45968546e-02, -4.01132926e-02, -1.25267655e-01, -3.88895907e-03,
			1.91000000e+02, 1.54000000e+02, 2.43000000e+02, 2.05000000e+02, 9.38783824e-01, 1.13164753e-01, -4.12500054e-02, -6.34074435e-02, 5.43425418e-03,
			2.47000000e+02, 2.75000000e+02, 2.99000000e+02, 3.27000000e+02, 9.16424870e-01, -5.54427877e-03, -4.23343778e-02, -1.80819571e-01, -1.26157999e-02,
			2.94000000e+02, 1.35000000e+02, 3.46000000e+02, 1.87000000e+02, 9.12661016e-01, 4.83000651e-03, -1.31538481e-01, -1.09739751e-02, 5.57082035e-02,
			2.47000000e+02, 2.01000000e+02, 2.99000000e+02, 2.52000000e+02, 8.97582352e-01, 8.03423394e-03, -9.85199735e-02, 6.43486530e-03, 9.14307982e-02,
			1.73000000e+02, 7.90000000e+01, 2.24000000e+02, 1.30000000e+02, 8.68841648e-01, 1.98184088e-01, 1.98275708e-02, -1.97148249e-02, 1.37677565e-02,
			2.47000000e+02, 2.19000000e+02, 2.99000000e+02, 2.71000000e+02, 8.26875389e-01, -4.85096164e-02, -1.19001731e-01, -3.98771018e-02, 2.24097930e-02,
			2.47000000e+02, 3.41000000e+02, 2.99000000e+02, 3.92000000e+02, 7.97293305e-01, 2.77274344e-02, -1.92399308e-01, 3.43092158e-02, 7.52068609e-02,
			2.38000000e+02, 1.44000000e+02, 2.89000000e+02, 1.96000000e+02, 7.88639665e-01, -5.38329780e-03, -1.80634752e-01, 1.98005065e-02, 1.09340288e-02,
			2.47000000e+02, 3.13000000e+02, 2.99000000e+02, 3.64000000e+02, 6.79586649e-01, 3.26336212e-02, -2.38431230e-01, 3.64469066e-02, -2.44539790e-02,
			2.66000000e+02, 5.10000000e+01, 3.17000000e+02, 1.02000000e+02, 6.67583764e-01, -4.91853841e-02, -3.58208120e-02, -5.58938421e-02, 1.58750221e-01,
			2.29000000e+02, 2.66000000e+02, 2.80000000e+02, 3.17000000e+02, 6.30352914e-01, 9.33899283e-02, -4.96173650e-02, 2.31320336e-02, 1.27742931e-01,
			2.44000000e+02, 2.83000000e+02, 3.16000000e+02, 3.56000000e+02, 9.96656537e-01, 3.01437024e-02, -9.68708694e-02, -6.62661865e-02, 8.37427527e-02,
			2.30000000e+02, 2.04000000e+02, 3.03000000e+02, 2.77000000e+02, 9.94011700e-01, 1.20302483e-01, -1.94349423e-01, 2.17034072e-02, -1.12380013e-01,
			2.44000000e+02, 3.09000000e+02, 3.16000000e+02, 3.82000000e+02, 9.84057128e-01, 5.40508442e-02, -2.02546179e-01, -3.23340595e-02, -9.69446264e-04,
			1.91000000e+02, 1.51000000e+02, 2.63000000e+02, 2.24000000e+02, 9.45829034e-01, 1.61108270e-01, -5.66872954e-02, 2.70408615e-02, 1.52264461e-02,
			2.57000000e+02, 2.04000000e+02, 3.29000000e+02, 2.77000000e+02, 8.06748331e-01, -1.41240582e-01, -1.51828408e-01, -1.98290050e-01, -2.47118529e-03,
			2.44000000e+02, 1.25000000e+02, 3.16000000e+02, 1.97000000e+02, 7.18220592e-01, 2.81636491e-02, -7.16374218e-02, -2.90201455e-02, 4.24995422e-02,
			1.91000000e+02, 1.25000000e+02, 2.63000000e+02, 1.97000000e+02, 6.07192993e-01, 1.05893567e-01, -3.09394300e-03, 4.56905141e-02, 1.54981196e-01,
			1.95000000e+02, 1.39000000e+02, 2.97000000e+02, 2.41000000e+02, 9.91735756e-01, 7.90825039e-02, -9.78166014e-02, -5.39516620e-02, -5.77941462e-02,
			2.32000000e+02, 1.02000000e+02, 3.34000000e+02, 2.04000000e+02, 9.20827806e-01, -7.85513073e-02, -9.92713571e-02, -9.81625617e-02, 1.19282380e-01,
			2.51000000e+02, 1.39000000e+02, 3.53000000e+02, 2.41000000e+02, 8.93811345e-01, 2.01638956e-02, -2.04821959e-01, -5.30151501e-02, -4.71881591e-02,
			1.95000000e+02, 1.02000000e+02, 2.97000000e+02, 2.04000000e+02, 7.64766216e-01, 3.62210497e-02, 4.57721576e-03, 3.15693840e-02, 2.79234976e-01,
			2.23000000e+02, 9.10000000e+01, 3.67000000e+02, 2.36000000e+02, 9.98139143e-01, -3.72815393e-02, -9.98418480e-02, -7.70605728e-02, 1.16418153e-01,
			2.23000000e+02, 1.44000000e+02, 3.67000000e+02, 2.88000000e+02, 9.59657609e-01, 1.78628769e-02, -2.95878172e-01, -1.07396677e-01, -2.00705156e-01,
			2.75000000e+02, 9.10000000e+01, 4.19000000e+02, 2.36000000e+02, 8.19527864e-01, 2.35665515e-02, 4.00160886e-02, -3.41928512e-01, -3.96483503e-02,
			1.70000000e+02, 9.10000000e+01, 3.14000000e+02, 2.36000000e+02, 8.18339527e-01, 2.43739292e-01, 3.61245982e-02, 6.27742335e-02, 4.64914329e-02,
			1.96000000e+02, 3.90000000e+01, 3.41000000e+02, 1.83000000e+02, 7.77969420e-01, 1.15551725e-01, 1.75964609e-01, -4.13505509e-02, 2.17152327e-01,
			1.66000000e+02, 9.20000000e+01, 3.70000000e+02, 2.96000000e+02, 9.98789012e-01, 3.14107060e-01, 4.09360193e-02, 2.82451510e-02, -3.25958282e-02,
			2.03000000e+02, 1.80000000e+01, 4.07000000e+02, 2.22000000e+02, 9.40885842e-01, 1.21894300e-01, 2.70426244e-01, -1.42774135e-01, 2.27811188e-01,
			2.40000000e+02, 9.20000000e+01, 4.44000000e+02, 2.96000000e+02, 7.00634658e-01, -1.49217770e-02, -1.14631541e-02, -4.10333633e-01, -1.82203099e-01,
			1.82000000e+02, 2.60000000e+01, 4.69000000e+02, 3.13000000e+02, 9.97039378e-01, 1.29406288e-01, 1.28545910e-01, -2.38053322e-01, -1.12856403e-01;
	    Matrix<double, 78, 1> out_p;
		out_p << 74, 69, 77, 58, 59, 65, 60, 34, 70, 46, 21, 61, 75, 35, 47, 22, 0, 23, 36, 37, 38, 66, 48, 49, 50, 1, 67, 51, 39, 24, 2, 25, 52, 3, 71, 72, 40, 62, 4, 53, 54, 73, 26, 68, 41, 5, 27, 6, 28, 7, 29, 63, 42, 8, 9, 76, 10, 11, 55, 12, 56, 13, 14, 15, 16, 43, 30, 57, 17, 31, 32, 18, 44, 33, 19, 64, 20, 45;

		vector<int> out;
		nms(total_boxes, 0.7, "Union", out);
		for (int i = 0; i < out.size(); i++){
			//REQUIRE(out[i] == out_p(i));
		}
	}

	SECTION("nms4")
	{
		MatrixXd total_boxes;
		total_boxes.resize(32, 9);
		total_boxes <<
			184, 94, 203, 113, 0.673369, 0.0841818, -0.0488475, 0.0750393, 0.0943255,
			188, 94, 206, 113, 0.646447, -0.0322339, -0.103326, 0.0751695, 0.150387,
			191, 94, 209, 113, 0.895024, -0.0434635, -0.100856, 0.0189853, 0.104824,
			201, 94, 219, 113, 0.66408, -0.0817665, -0.140165, 0.0229184, 0.143394,
			358, 114, 376, 133, 0.659236, -0.0969149, -0.0510173, -0.137302, 0.189575,
			244, 121, 263, 139, 0.725342, -0.0439546, -0.12307, 0.044887, 0.20344,
			248, 121, 266, 139, 0.732024, -0.0390664, -0.10162, 0.0733767, 0.226069,
			278, 128, 296, 146, 0.705132, -0.0641674, -0.0174755, -0.0579213, 0.205339,
			274, 131, 293, 149, 0.720661, -0.0529862, -0.0342523, -0.0692066, 0.197052,
			278, 131, 296, 149, 0.676996, -0.0576521, -0.0416127, -0.152568, 0.115463,
			274, 134, 293, 153, 0.706298, -0.0676914, -0.117664, -0.0232202, 0.12937,
			278, 134, 296, 153, 0.93361, -0.0820154, -0.0718936, -0.165383, 0.0794546,
			354, 134, 373, 153, 0.658443, -0.0276966, -0.141339, -0.0552261, 0.0709444,
			354, 138, 373, 156, 0.640713, -0.0531829, -0.220836, -0.0425284, 0.0539629,
			231, 141, 249, 159, 0.694773, 0.000177512, -0.0194123, -0.0675368, 0.198527,
			354, 141, 373, 159, 0.761157, -0.0268058, -0.253879, 0.0179893, 0.0675155,
			251, 144, 269, 163, 0.805956, 0.0293288, -0.0910318, 0.0251095, 0.0470301,
			254, 144, 273, 163, 0.620101, -0.0717875, -0.0955546, -0.0107439, 0.112354,
			214, 148, 233, 166, 0.604666, -0.0578003, -0.0793638, -0.0300562, 0.145663,
			354, 148, 373, 166, 0.608781, 0.0401631, -0.181, -0.000439029, 0.038861,
			354, 161, 373, 179, 0.712293, 0.0616945, -0.134688, -0.0214347, 0.0606372,
			358, 161, 376, 179, 0.772113, 0.00361947, -0.0596734, -0.0796181, 0.0874351,
			358, 164, 376, 183, 0.826624, -0.00499071, -0.0966295, -0.0533807, 0.058396,
			361, 171, 379, 189, 0.701462, -0.0614193, -0.154275, -0.0568182, 0.0809656,
			244, 221, 263, 239, 0.627591, 0.0456827, -0.0308516, -0.00718835, 0.0520548,
			271, 241, 289, 259, 0.681389, -0.108519, -0.250961, -0.0113022, 0.0695332,
			121, 254, 139, 273, 0.66459, 0.0422678, -0.0597294, -0.00868497, 0.0956014,
			234, 261, 253, 279, 0.621665, -0.0135341, -0.280142, 0.0819844, 0.0462583,
			244, 348, 263, 366, 0.735059, 0.144458, -0.0745378, 0.0876102, 0.124142,
			254, 348, 273, 366, 0.730409, -0.142105, -0.160893, -0.00536752, 0.192732,
			251, 351, 269, 369, 0.813211, -0.137665, -0.260863, 0.0336307, 0.114659,
			254, 351, 273, 369, 0.845107, -0.17021, -0.277868, 0.00169333, 0.105847; 
	    //Matrix<double, 32, 1> out_p;
		//out_p << 74, 69, 77, 58, 59, 65, 60, 34, 70, 46, 21, 61, 75, 35, 47, 22, 0, 23, 36, 37, 38, 66, 48, 49, 50, 1, 67, 51, 39, 24, 2, 25, 52, 3, 71, 72, 40, 62, 4, 53, 54, 73, 26, 68, 41, 5, 27, 6, 28, 7, 29, 63, 42, 8, 9, 76, 10, 11, 55, 12, 56, 13, 14, 15, 16, 43, 30, 57, 17, 31, 32, 18, 44, 33, 19, 64, 20, 45;

		vector<int> out;
		nms(total_boxes, 0.5, "Union", out);

		for (int i = 0; i < out.size(); i++){
			cout << out[i] << " " << endl;
			//REQUIRE(out[i] == out_p(i));
		}
	}
	
	SECTION("generateBoxes"){
		MatrixXd map = MatrixXd::Zero(130, 125);
		loadFromFile("H:/project/vs/caffe/windows/mtcnn/test_data/map.out", map);
		MatrixXd reg0 = MatrixXd::Zero(130, 125);
		MatrixXd reg1 = MatrixXd::Zero(130, 125);
		MatrixXd reg2 = MatrixXd::Zero(130, 125);
		MatrixXd reg3 = MatrixXd::Zero(130, 125);
		loadFromFile("H:/project/vs/caffe/windows/mtcnn/test_data/reg0.out", reg0);
		loadFromFile("H:/project/vs/caffe/windows/mtcnn/test_data/reg1.out", reg1);
		loadFromFile("H:/project/vs/caffe/windows/mtcnn/test_data/reg2.out", reg2);
		loadFromFile("H:/project/vs/caffe/windows/mtcnn/test_data/reg3.out", reg3);
		vector<MatrixXd> reg;
		reg.push_back(reg0);
		reg.push_back(reg1);
		reg.push_back(reg2);
		reg.push_back(reg3);
		MatrixXd boxes = MatrixXd::Zero(32, 9);
		loadFromFile("H:/project/vs/caffe/windows/mtcnn/test_data/boxes.out", boxes);
		
		double scale = 0.6;
		double threshold = 0.6;
		MatrixXd out;
		generateBoundingBox(map, reg, scale, threshold, out);
		REQUIRE(boxes.rows() == out.rows());
		REQUIRE(boxes.cols() == out.cols());

		for (int i = 0; i < boxes.size(); i++){
			REQUIRE(boxes(i) == out(i));
		}
	}

	/*
	SECTION("drawBoxes")
	{
		Mat im = imread("H:/project/vs/caffe/windows/mtcnn/test_data/test.jpg");
		MatrixXd boxes;
		boxes.resize(3, 4);
		boxes << 10, 10, 20, 20,
			20, 20, 40, 40,
			60, 60, 100, 100;
		drawBoxes(im, boxes);
		imshow("drawBoxes test", im);
		waitKey(0);
	}
	*/
}