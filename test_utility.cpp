#include <gtest/gtest.h>

#include "utility.hpp"
#include <fstream>

void loadFromFile(string filename, MatrixXd& X)
{
    ifstream fin(filename);
    if (fin.is_open()){
        for (int row = 0; row < X.rows(); row++)
            for (int col = 0; col < X.cols(); col++){
                double item = 0.0;
                fin >> item;
                X(row, col) = item;
            }
        fin.close();
    }
}

TEST(bbreg, test_bbreg)
{
    MatrixXd total_boxes;
    total_boxes.resize(2, 5);
    total_boxes << 205, 73, 400, 268, 0.98384535,
    	209, 101, 367, 259, 0.97880608;
    MatrixXd mv;
    mv.resize(4, 2);
    mv << -0.04941138, -0.07724266,
    	0.0447434, -0.08641055,
    	-0.28392452, -0.1872426,
    	0.03337108, 0.05036401;
    MatrixXd mv_t;
    mv_t.resize(2,4);
    mv_t = mv.transpose();
    Matrix<double, 2, 5> boxes_p;
    boxes_p << 195.31536902, 81.76970568, 344.35079408, 274.54073162, 0.98384535,
    	196.71841745, 87.26072219, 337.2284270, 267.00787819, 0.97880608; 

    bbreg(total_boxes, mv_t); // how to use reference here?
    for (int i = 0; i < total_boxes.size(); i++){
    	EXPECT_EQ((int)total_boxes(i), (int)boxes_p(i));
    }
}

TEST(pad, test_pad)
{
    MatrixXd total_boxes;
    total_boxes.resize(78, 5);
    total_boxes <<
        208,          100,          397,          289,            0.99878901,
        198,           76,          374,          252,            0.99813914,
        201,           62,          418,          280,            0.99703938,
        235,          275,          321,          362,            0.99665654,
        232,          189,          311,          268,            0.9940117 ,
        194,          129,          300,          235,            0.99173576,
        236,          294,          324,          381,            0.98405713,
        179,           88,          215,          124,            0.97458196,
        209,          101,          367,          259,            0.95965761,
        329,          104,          381,          157,            0.95791584,
        180,           89,          209,          118,            0.9525429 ,
        194,          146,          272,          225,            0.94582903,
        205,           73,          400,          268,            0.94088584,
        242,          272,          285,          315,            0.93917483,
        191,          151,          244,          205,            0.93878382,
        245,          342,          276,          373,            0.9339292 ,
        274,          133,          295,          154,            0.9336105 ,
        188,           90,          217,          119,            0.93259424,
        185,           90,          228,          133,            0.92992473,
        198,          169,          241,          211,            0.92471832,
        244,          337,          286,          379,            0.92156881,
        211,           91,          336,          216,            0.92082781,
        241,          272,          294,          326,            0.91642487,
        288,          128,          350,          189,            0.91266102,
        243,          195,          303,          256,            0.89758235,
        189,           93,          211,          114,            0.89502412,
        241,          118,          359,          236,            0.89381135,
        177,           80,          228,          130,            0.86884165,
        199,          148,          239,          187,            0.8607381 ,
        247,          280,          280,          314,            0.85781771,
        249,          345,          275,          372,            0.84510684,
        263,          230,          297,          264,            0.83451498,
        241,          212,          300,          272,            0.82687539,
        356,          163,          376,          184,            0.82662463,
        257,           96,          390,          230,            0.81952786,
        190,           96,          337,          242,            0.81833953,
        247,          225,          295,          273,            0.81787145,
        238,          192,          322,          276,            0.80674833,
        250,          143,          271,          163,            0.80595565,
        242,          331,          306,          395,            0.79729331,
        232,          134,          294,          196,            0.78863966,
        198,           64,          348,          214,            0.77796942,
        254,          128,          285,          159,            0.77550071,
        184,          102,          314,          232,            0.76476622,
        339,          108,          377,          146,            0.76366198,
        351,          136,          376,          161,            0.76115662,
        202,          160,          236,          194,            0.74090749,
        245,          346,          266,          368,            0.73505855,
        246,          344,          279,          377,            0.73426574,
        244,          119,          269,          144,            0.73202336,
        235,          210,          266,          242,            0.72657281,
        239,          119,          320,          200,            0.71822059,
        245,          114,          286,          155,            0.71781677,
        274,          127,          296,          149,            0.70513207,
        357,          168,          381,          191,            0.7014606 ,
        214,           89,          383,          258,            0.70063466,
        228,          140,          251,          163,            0.69477326,
        266,          236,          291,          261,            0.68138945,
        243,          300,          305,          362,            0.67958665,
        185,           94,          205,          114,            0.67336899,
        258,           49,          319,          110,            0.66758376,
        120,          253,          141,          274,            0.66458988,
        198,           92,          221,          115,            0.66407984,
        353,          114,          376,          136,            0.65923673,
        352,          132,          374,          154,            0.65844285,
        201,          158,          239,          196,            0.64497852,
        197,          147,          227,          177,            0.64341497,
        227,          263,          287,          323,            0.63035291,
        244,          220,          264,          240,            0.62759042,
        261,          129,          293,          161,            0.6267885 ,
        271,          201,          303,          233,            0.62397933,
        232,          255,          257,          280,            0.62166524,
        197,          172,          245,          220,            0.62008858,
        349,          114,          378,          143,            0.61586976,
        353,          144,          375,          166,            0.6087805 ,
        190,          124,          274,          208,            0.60719299,
        212,          146,          234,          168,            0.60466552,
        343,          109,          380,          146,            0.60001802;
    double w = 450;
    double h = 431;
    
    Matrix<double, 78, 1> dy, edy, dx, edx, y, ey, x, ex, tmpw, tmph;
    dy << 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
    dx << 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
    y  <<  99,   75,   61,  274,  188,  128,  293,   87,  100,  103,   88,  145,   72,  271,  150,  341,  132,   89,   89,  168,  336,   90,  271,  127,  194,   92,  117,   79,  147,  279,  344,  229,  211,  162,   95,   95,  224,  191,  142,  330,  133,   63,  127,  101,  107,  135,  159,  345,  343,  118,  209,  118,  113,  126,  167,   88,  139,  235,  299,   93,   48,  252,   91,  113,  131,  157,  146,  262,  219,  128,  200,  254,  171,  113,  143,  123,  145,  108;
    x  << 207,  197,  200,  234,  231,  193,  235,  178,  208,  328,  179,  193,  204,  241,  190,  244,  273,  187,  184,  197,  243,  210,  240,  287,  242,  188,  240,  176,  198,  246,  248,  262,  240,  355,  256,  189,  246,  237,  249,  241,  231,  197,  253,  183,  338,  350,  201,  244,  245,  243,  234,  238,  244,  273,  356,  213,  227,  265,  242,  184,  257,  119,  197,  352,  351,  200,  196,  226,  243,  260,  270,  231,  196,  348,  352,  189,  211,  342;
    edy << 189,  176,  218,   87,   79,  106,   87,   36,  158,   53,   29,   79,  195,   43,   54,   31,   21,   29,   43,   42,   42,  125,   54,   61,   61,   21,  118,   50,   39,   34,   27,   34,   60,   21,  134,  146,   48,   84,   20,   64,   62,  150,   31,  130,   38,   25,   34,   22,   33,   25,   32,   81,   41,   22,   23,  169,   23,   25,   62,   20,   61,   21,   23,   22,   22,   38,   30,   60,   20,   32,   32,   25,   48,   29,   22,   84,   22,   37;
    edx << 189,  176,  217,   86,   79,  106,   88,   36,  158,   52,   29,   78,  195,   43,   53,   31,   21,   29,   43,   43,   42,  125,   53,   62,   60,   22,  118,   51,   40,   33,   26,   34,   59,   20,  133,  147,   48,   84,   21,   64,   62,  150,   31,  130,   38,   25,   34,   21,   33,   25,   31,   81,   41,   22,   24,  169,   23,   25,   62,   20,   61,   21,   23,   23,   22,   38,   30,   60,   20,   32,   32,   25,   48,   29,   22,   84,   22,   37;
    ey << 288,  251,  279,  361,  267,  234,  380,  123,  258,  156,  117,  224,  267,  314,  204,  372,  153,  118,  132,  210,  378,  215,  325,  188,  255,  113,  235,  129,  186,  313,  371,  263,  271,  183,  229,  241,  272,  275,  162,  394,  195,  213,  158,  231,  145,  160,  193,  367,  376,  143,  241,  199,  154,  148,  190,  257,  162,  260,  361,  113,  109,  273,  114,  135,  153,  195,  176,  322,  239,  160,  232,  279,  219,  142,  165,  207,  167,  145;
    ex << 396,  373,  417,  320,  310,  299,  323,  214,  366,  380,  208,  271,  399,  284,  243,  275,  294,  216,  227,  240,  285,  335,  293,  349,  302,  210,  358,  227,  238,  279,  274,  296,  299,  375,  389,  336,  294,  321,  270,  305,  293,  347,  284,  313,  376,  375,  235,  265,  278,  268,  265,  319,  285,  295,  380,  382,  250,  290,  304,  204,  318,  140,  220,  375,  373,  238,  226,  286,  263,  292,  302,  256,  244,  377,  374,  273,  233,  379;
    tmpw << 190,  177,  218,   87,   80,  107,   89,   37,  159,   53,   30,   79,  196,   44,   54,   32,   22,   30,   44,   44,   43,  126,   54,   63,   61,   23,  119,   52,   41,   34,   27,   35,   60,   21,  134,  148,   49,   85,   22,   65,   63,  151,   32,  131,   39,   26,   35,   22,   34,   26,   32,   82,   42,   23,   25,  170,   24,   26,   63,   21,   62,   22,   24,   24,   23,   39,   31,   61,   21,   33,   33,   26,   49,   30,   23,   85,   23,   38;
    tmph << 190,  177,  219,   88,   80,  107,   88,   37,  159,   54,   30,   80,  196,   44,   55,   32,   22,   30,   44,   43,   43,  126,   55,   62,   62,   22,  119,   51,   40,   35,   28,   35,   61,   22,  135,  147,   49,   85,   21,   65,   63,  151,   32,  131,   39,   26,   35,   23,   34,   26,   33,   82,   42,   23,   24,  170,   24,   26,   63,   21,   62,   22,   24,   23,   23,   39,   31,   61,   21,   33,   33,   26,   49,   30,   23,   85,   23,   38;

    MatrixXd result;
    pad(total_boxes, w, h, result);
    for (int i = 0; i < result.rows(); i++){
    	EXPECT_EQ((int)result(i, 0) , (int)dy(i,0));
    	EXPECT_EQ((int)result(i, 1) , (int)edy(i,0));
    	EXPECT_EQ((int)result(i, 2) , (int)dx(i,0));
    	EXPECT_EQ((int)result(i, 3) , (int)edx(i,0));
    	EXPECT_EQ((int)result(i, 4) , (int)y(i,0));
    	EXPECT_EQ((int)result(i, 5) , (int)ey(i,0));
    	EXPECT_EQ((int)result(i, 6) , (int)x(i,0));
    	EXPECT_EQ((int)result(i, 7) , (int)ex(i,0));
    	EXPECT_EQ((int)result(i, 8) , (int)tmpw(i,0));
    	EXPECT_EQ((int)result(i, 9) , (int)tmph(i,0));
    }
}

TEST(rerec, test_rerec)
{
    MatrixXd total_boxes;
    total_boxes.resize(5, 5);
    total_boxes << 
    	230.07784033, 100.35094793, 375.76201081, 289.35045105, 0.99878901,
    	217.63145834, 76.52293204, 355.90327752, 252.88063219, 0.99813914,
    	219.13960473, 62.8926762, 400.67869663, 280.61021234, 0.99703938,
    	246.17034657, 275.92842653, 311.22883457, 362.11322095, 0.99665654,
    	238.78208129, 189.81249212, 304.58434872, 268.79625906, 0.9940117;
    Matrix<double, 5, 5> out;
    out << 
    	208.42017401, 100.35094793, 397.41967713, 289.35045105, 0.99878901,
    	198.58851785, 76.52293204, 374.94621801, 252.88063219, 0.99813914,
    	201.05038261, 62.8926762, 418.76791875, 280.61021234, 0.99703938,
    	235.60719337, 275.92842653, 321.79198778, 362.11322095, 0.99665654,
    	232.19133154, 189.81249212, 311.17509848, 268.79625906, 0.9940117;
    rerec(total_boxes);
    for (int i = 0; i < total_boxes.size(); i++){
    	EXPECT_EQ((int)total_boxes(i) , (int)out(i));
    }
}

TEST(generateBoxes, test_generateBoxes)
{
    MatrixXd map = MatrixXd::Zero(130, 125);
    string filePath("/home/duino/project/iactive/mtcnn/");
    loadFromFile(filePath+"test_data/map.out", map);
    MatrixXd reg0 = MatrixXd::Zero(130, 125);
    MatrixXd reg1 = MatrixXd::Zero(130, 125);
    MatrixXd reg2 = MatrixXd::Zero(130, 125);
    MatrixXd reg3 = MatrixXd::Zero(130, 125);
    loadFromFile(filePath+"test_data/reg0.out", reg0);
    loadFromFile(filePath+"test_data/reg1.out", reg1);
    loadFromFile(filePath+"test_data/reg2.out", reg2);
    loadFromFile(filePath+"test_data/reg3.out", reg3);
    vector<MatrixXd> reg;
    reg.push_back(reg0);
    reg.push_back(reg1);
    reg.push_back(reg2);
    reg.push_back(reg3);
    MatrixXd boxes = MatrixXd::Zero(32, 9);
    loadFromFile(filePath+"test_data/boxes.out", boxes);

    double scale = 0.6;
    double threshold = 0.6;
    MatrixXd out;
    generateBoundingBox(map, reg, scale, threshold, out);
    EXPECT_EQ(boxes.rows() , out.rows());
    EXPECT_EQ(boxes.cols() , out.cols());

    for (int i = 0; i < boxes.size(); i++){
        EXPECT_EQ(boxes(i) , out(i));
    }
}

TEST(drawBoxes, test_drawBoxes)
{
    string filePath("/home/duino/project/iactive/mtcnn/");
    Mat im = imread(filePath+"test_data/test.jpg");
    MatrixXd boxes;
    boxes.resize(3, 4);
    boxes << 10, 10, 20, 20,
        20, 20, 40, 40,
        60, 60, 100, 100;
    drawBoxes(im, boxes);
    //imshow("drawBoxes test", im);
    //waitKey(0);
}

int main(int args, char *argv[])
{
    testing::InitGoogleTest(&args, argv);
    return RUN_ALL_TESTS();
}
